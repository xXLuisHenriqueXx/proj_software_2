datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "windows"]
}


model User {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  email           String   @unique
  password        String
  name            String
  role            Role     @default(USER)
  parentalControl Boolean  @default(false)
  active          Boolean  @default(true)
  cpf             String?  @unique
  cnpj            String?  @unique
  pix_key         String?  @unique
  picture         String?  @db.Text

  addressDistrict String
  addressStreet   String
  addressNumber   Int
  addressDetail   String?
  addressCep      String

  // Relacionamentos
  toys Toy[]

  history HistoryEntry[]

  ratings          Rate[]
  organizationInfo organizationInfo?

  // relação com chats
  chatsAsUser1 Chat[] @relation("User1Chats")
  chatsAsUser2 Chat[] @relation("User2Chats")

  // mensagens enviadas
  messages Message[]
}

model organizationInfo {
  id             String @id @default(uuid())
  organizationId String @unique
  organization   User   @relation(fields: [organizationId], references: [id])
  description    String
  phone_number1  Int
  phone_number2  Int?
}

enum Role {
  USER
  ADMIN
}

model Toy {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  history HistoryEntry[]

  price Float

  isNew        Boolean
  canTrade     Boolean
  canLend      Boolean
  usageTime    Int
  type         ToyType[]
  ToyPictures  ToyPicture[] @relation("Pictures")
  ageGroup     AgeRange
  discount     Int
}

enum ToyType {
  BOYS
  GIRLS
  ARTISTIC
  ADVENTURE
  DOLLS
  CARS
  CARDS
  EDUCATIONAL
  SPORTS
  STRATEGY
  WORDS
  BABIES
  PUZZLES
  SIMULATION
  BOARD
  VIDEOGAME
}

enum AgeRange {
  ZERO_TO_ONE // 0 to 1 year
  ONE_TO_THREE // 1 to 3 years
  THREE_TO_SIX // 3 to 6 years
  SIX_TO_TWELVE // 6 to 12 years
  TWELVE_OR_MORE // 12 years or more
}

model ToyPicture {
  id      String @id @default(uuid())
  order   Int
  toyId   String
  toy     Toy    @relation("Pictures", fields: [toyId], references: [id])
  picture String
}

// Visualização de um brinquedo pelo usuário
// - Utilizado para recomendações futuras baseado em gostos
model HistoryEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  visible   Boolean  @default(true)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  toyId String
  toy   Toy    @relation(fields: [toyId], references: [id])
}

model Rate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  value     Int // CHECK (value BETWEEN 1 AND 5)
  comment   String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // participantes (2 usuários por chat)
  user1Id String
  user1   User   @relation("User1Chats", fields: [user1Id], references: [id])

  user2Id String
  user2   User   @relation("User2Chats", fields: [user2Id], references: [id])

  // mensagens
  messages Message[]
}


enum HighlightType {
  FREE        // Brinquedos gratuitos (price = 0)
  NEARBY      // Mais perto do usuário logado
  POPULAR     // Mais visualizados
  RECENT      // Últimos adicionados
  NEW         // Brinquedos novos
}

model Highlight {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  name        String
  description String?
  type        HighlightType
  picture       String?        @db.Text
}


model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String

  // remetente
  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  // chat em que a mensagem foi enviada
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])
}
